CREATE PIPELINE <identifier>
[WITH
  [SCHEDULE ONCE|<shedule_parameters>|<FOR @<identifier> = 1 TO 1000 [STEP 10]>
  [BUILDER <pipeline_builder_class_identifier>(<pipeline_builder_options>)]
  [OPTIONS <pipeline_options>]
]

SOURCE <database_alias>|<connection_string> ? TYPE SqlServer|PostgreSql ?
[QUEUE <queue_identifier>]
[QUERY <select_definition>|<delete_output_definition>|<query_template>]
CONSUMER <consumer_class_identifier>|SqlServer|PostgreSql
MESSAGE <message_type_identifier>
OPTIONS <consumer_options>

TARGET <database_alias>|<connection_string> ? TYPE SqlServer|PostgreSql ?
QUEUE <queue_identifier>|<table_identifier>
PRODUCER <producer_class_identifier>|SqlServer|PostgreSql
MESSAGE <message_type_identifier>
OPTIONS <producer_options>

[TRANSFORM ? <insert_definition>|<update_definition> ?
  <transformer_class_identifier>(<transformer_options>)
  {, <transformer_class_identifier>(<transformer_options>)}
  ? WHERE ?
]

********************************************************************************

UPDATE PIPELINE <identifier>
DELETE PIPELINE <identifier>
PUMP PIPELINE <identifier>
STOP PIPELINE <identifier>
SHOW PIPELINE <identifier>
LIST PIPELINES

********************************************************************************

CREATE PIPELINE "(ms >>> pg)"
SCHEDULE EACH 60 SECONDS
OPTIONS(ACTIVE = OFF)

SOURCE ms-database TYPE SqlServer QUEUE OutgoingMessageQueue
? [QUERY <select_definition>|<delete_output_definition>|<query_template>] ?
CONSUMER DaJet.SqlServer.Consumer`1
MESSAGE DaJet.Contracts.DatabaseMessage
OPTIONS(MessagesPerTransaction = 1000)

TARGET pg-database TYPE PostgreSql QUEUE IncomingMessageQueue
PRODUCER DaJet.PostgreSql.Producer`1
MESSAGE DaJet.Contracts.DatabaseMessage

TRANSFORM
WITH(<expression>) ? MAP Property1 TO Property2 ?
NEXT(<expression>)